!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!XML	uri	/uri associated with name prefix/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Glade	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Glade	h,handler	/handlers/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!XML	i,id	/id attributes/
!_TAG_KIND_DESCRIPTION!XML	n,nsprefix	/namespace prefixes/
!_TAG_KIND_DESCRIPTION!XML	r,root	/root elements/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Glade	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!XML	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/walid/workspace/servers/nio_with_gui/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Glade!class	widget	/specified as a widget constructor/
!_TAG_ROLE_DESCRIPTION!Glade!handler	handler	/specified as a callback for signal emission/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
%.o	Makefile	/^%.o: %.c$/;"	t
APP_TYPE_COMMUNICATION	com_obj.h	/^#define APP_TYPE_COMMUNICATION /;"	d
ARRAY_COUNT	gui.c	/^#define ARRAY_COUNT(/;"	d	file:
ARRAY_SIZE	node_http_parser.c	/^# define ARRAY_SIZE(/;"	d	file:
AppCommunication	com_obj.h	/^     typedef struct _AppCommunication AppCommunication;$/;"	t	typeref:struct:_AppCommunication
BIT_AT	node_http_parser.c	/^# define BIT_AT(/;"	d	file:
CALLBACK_DATA	node_http_parser.c	/^#define CALLBACK_DATA(/;"	d	file:
CALLBACK_DATA_	node_http_parser.c	/^#define CALLBACK_DATA_(/;"	d	file:
CALLBACK_DATA_NOADVANCE	node_http_parser.c	/^#define CALLBACK_DATA_NOADVANCE(/;"	d	file:
CALLBACK_NOTIFY	node_http_parser.c	/^#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_/;"	d	file:
CALLBACK_NOTIFY_	node_http_parser.c	/^#define CALLBACK_NOTIFY_(/;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	node_http_parser.c	/^#define CALLBACK_NOTIFY_NOADVANCE(/;"	d	file:
CC	Makefile	/^CC= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= `pkg-config --cflags gtk+-3.0` -rdynamic$/;"	m
CHUNKED	node_http_parser.c	/^#define CHUNKED /;"	d	file:
CLOSE	node_http_parser.c	/^#define CLOSE /;"	d	file:
COM_OBJ_H	com_obj.h	/^#define COM_OBJ_H$/;"	d
CONNECTION	node_http_parser.c	/^#define CONNECTION /;"	d	file:
CONTENT_LENGTH	node_http_parser.c	/^#define CONTENT_LENGTH /;"	d	file:
COUNT_HEADER_SIZE	node_http_parser.c	/^#define COUNT_HEADER_SIZE(/;"	d	file:
CR	node_http_parser.c	/^#define CR /;"	d	file:
CURRENT_LINE	http_parser_utils.h	/^#define CURRENT_LINE /;"	d
CURRENT_STATE	node_http_parser.c	/^#define CURRENT_STATE(/;"	d	file:
DEBUG	Makefile	/^DEBUG= -g$/;"	m
ELEM_AT	node_http_parser.c	/^# define ELEM_AT(/;"	d	file:
F_CHUNKED	node_http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	node_http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	node_http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_CONNECTION_UPGRADE	node_http_parser.h	/^  , F_CONNECTION_UPGRADE    = 1 << 3$/;"	e	enum:flags
F_CONTENTLENGTH	node_http_parser.h	/^  , F_CONTENTLENGTH         = 1 << 7$/;"	e	enum:flags
F_SKIPBODY	node_http_parser.h	/^  , F_SKIPBODY              = 1 << 6$/;"	e	enum:flags
F_TRAILING	node_http_parser.h	/^  , F_TRAILING              = 1 << 4$/;"	e	enum:flags
F_TRANSFER_ENCODING	node_http_parser.h	/^  , F_TRANSFER_ENCODING     = 1 << 8  \/* Never set in http_parser.flags *\/$/;"	e	enum:flags
F_UPGRADE	node_http_parser.h	/^  , F_UPGRADE               = 1 << 5$/;"	e	enum:flags
G_DEFINE_TYPE	com_obj.c	/^G_DEFINE_TYPE (AppCommunication, app_communication , G_TYPE_OBJECT)$/;"	f
HTTP_BOTH	node_http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	node_http_parser.h	/^#define HTTP_ERRNO_GEN(/;"	d
HTTP_ERRNO_MAP	node_http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	node_http_parser.h	/^#define HTTP_ERRNO_MAP(/;"	d
HTTP_MAX_HEADER_SIZE	node_http_parser.h	/^# define HTTP_MAX_HEADER_SIZE /;"	d
HTTP_METHOD_MAP	node_http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	node_http_parser.h	/^#define HTTP_METHOD_MAP(/;"	d
HTTP_PARSER_ERRNO	node_http_parser.h	/^#define HTTP_PARSER_ERRNO(/;"	d
HTTP_PARSER_STRICT	node_http_parser.h	/^# define HTTP_PARSER_STRICT /;"	d
HTTP_PARSER_VERSION_MAJOR	node_http_parser.h	/^#define HTTP_PARSER_VERSION_MAJOR /;"	d
HTTP_PARSER_VERSION_MINOR	node_http_parser.h	/^#define HTTP_PARSER_VERSION_MINOR /;"	d
HTTP_PARSER_VERSION_PATCH	node_http_parser.h	/^#define HTTP_PARSER_VERSION_PATCH /;"	d
HTTP_REQUEST	node_http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	node_http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_STATUS_MAP	node_http_parser.h	/^  HTTP_STATUS_MAP(XX)$/;"	e	enum:http_status
HTTP_STATUS_MAP	node_http_parser.h	/^#define HTTP_STATUS_MAP(/;"	d
HTTP_STRERROR_GEN	node_http_parser.c	/^#define HTTP_STRERROR_GEN(/;"	d	file:
IS_ALPHA	node_http_parser.c	/^#define IS_ALPHA(/;"	d	file:
IS_ALPHANUM	node_http_parser.c	/^#define IS_ALPHANUM(/;"	d	file:
IS_HEADER_CHAR	node_http_parser.c	/^#define IS_HEADER_CHAR(/;"	d	file:
IS_HEX	node_http_parser.c	/^#define IS_HEX(/;"	d	file:
IS_HOST_CHAR	node_http_parser.c	/^#define IS_HOST_CHAR(/;"	d	file:
IS_MARK	node_http_parser.c	/^#define IS_MARK(/;"	d	file:
IS_NUM	node_http_parser.c	/^#define IS_NUM(/;"	d	file:
IS_URL_CHAR	node_http_parser.c	/^#define IS_URL_CHAR(/;"	d	file:
IS_USERINFO_CHAR	node_http_parser.c	/^#define IS_USERINFO_CHAR(/;"	d	file:
KEEP_ALIVE	node_http_parser.c	/^#define KEEP_ALIVE /;"	d	file:
LF	node_http_parser.c	/^#define LF /;"	d	file:
LIBS	Makefile	/^LIBS= -lpthread `pkg-config --libs gtk+-3.0`$/;"	m
LIKELY	node_http_parser.c	/^# define LIKELY(/;"	d	file:
LOWER	node_http_parser.c	/^#define LOWER(/;"	d	file:
MARK	node_http_parser.c	/^#define MARK(/;"	d	file:
MAX_HEADER_NUM	http_parser_utils.h	/^#define MAX_HEADER_NUM /;"	d
MAX_HEADER_NUM	server.h	/^#define MAX_HEADER_NUM /;"	d
MIN	node_http_parser.c	/^# define MIN(/;"	d	file:
NEW_MESSAGE	node_http_parser.c	/^# define NEW_MESSAGE(/;"	d	file:
OBJ	Makefile	/^OBJ= $(SRC:.c=.o)$/;"	m
PARSING_HEADER	node_http_parser.c	/^#define PARSING_HEADER(/;"	d	file:
PROXY_CONNECTION	node_http_parser.c	/^#define PROXY_CONNECTION /;"	d	file:
REEXECUTE	node_http_parser.c	/^#define REEXECUTE(/;"	d	file:
RETURN	node_http_parser.c	/^#define RETURN(/;"	d	file:
SET_ERRNO	node_http_parser.c	/^#define SET_ERRNO(/;"	d	file:
SRC	Makefile	/^SRC= $(wildcard *.c)$/;"	m
STRICT_CHECK	node_http_parser.c	/^# define STRICT_CHECK(/;"	d	file:
STRICT_TOKEN	node_http_parser.c	/^#define STRICT_TOKEN(/;"	d	file:
T	node_http_parser.c	/^# define T(/;"	d	file:
TAGS	Makefile	/^TAGS= . \/usr\/include\/sys \/usr\/include\/netinet \/usr\/include\/gtk-3.0 \/usr\/include\/pang/;"	m
TOKEN	node_http_parser.c	/^#define TOKEN(/;"	d	file:
TOKEN	node_http_parser.c	/^#define TOKEN(c)            STRICT_TOKEN(/;"	d	file:
TRANSFER_ENCODING	node_http_parser.c	/^#define TRANSFER_ENCODING /;"	d	file:
UF_FRAGMENT	node_http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	node_http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	node_http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	node_http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	node_http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	node_http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	node_http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	node_http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
ULLONG_MAX	node_http_parser.c	/^# define ULLONG_MAX /;"	d	file:
UNLIKELY	node_http_parser.c	/^# define UNLIKELY(/;"	d	file:
UPDATE_STATE	node_http_parser.c	/^#define UPDATE_STATE(/;"	d	file:
UPGRADE	node_http_parser.c	/^#define UPGRADE /;"	d	file:
XX	node_http_parser.c	/^#define XX(/;"	d	file:
XX	node_http_parser.h	/^#define XX(/;"	d
_AppCommunication	com_obj.h	/^struct _AppCommunication{$/;"	s
_HTTP_PARSER_UTILS_H	http_parser_utils.h	/^#define _HTTP_PARSER_UTILS_H$/;"	d
_MY_GUI_H	gui.h	/^#define _MY_GUI_H$/;"	d
_NODE_HTTP_PARSER_H	node_http_parser.h	/^#define _NODE_HTTP_PARSER_H$/;"	d
_SERVER_H	server.h	/^#define _SERVER_H$/;"	d
_SOCKET_H	socket.h	/^#define _SOCKET_H$/;"	d
_UTILS_H	utils.h	/^#define _UTILS_H$/;"	d
_VEC_QUEUE_H	vec_queue.h	/^#define _VEC_QUEUE_H$/;"	d
__anon84915bf70108	http_parser_utils.h	/^typedef struct  {$/;"	s
__anonc7a432bd0108	vec_queue.h	/^typedef struct {$/;"	s
__anonec7e8d040108	socket.h	/^typedef struct {$/;"	s
__anonf8ffc3070108	node_http_parser.c	/^static struct {$/;"	s	file:
__anonf8ffc30c0108	node_http_parser.h	/^  struct {$/;"	s	struct:http_parser_url
_request	http_parser_utils.h	/^struct _request {$/;"	s
activate_server	server.c	/^activate_server()$/;"	f	typeref:typename:void	file:
addr	socket.h	/^	int addr;$/;"	m	struct:__anonec7e8d040108	typeref:typename:int
all	Makefile	/^all: main$/;"	t
app_communication_class_init	com_obj.c	/^app_communication_class_init(AppCommunicationClass *ceelas)$/;"	f	typeref:typename:void	file:
app_communication_init	com_obj.c	/^app_communication_init(AppCommunication *self)$/;"	f	typeref:typename:void	file:
argc	gui.h	/^	int argc;$/;"	m	struct:cmd_params	typeref:typename:int
argv	gui.h	/^	char **argv;$/;"	m	struct:cmd_params	typeref:typename:char **
body_cb	http_parser_utils.c	/^body_cb (http_parser *parser, const char* p, size_t len)$/;"	f	typeref:typename:int
box_main	server.glade	/^      <object class="GtkBox" id="box_main">$/;"	i
builder	gui.c	/^static GtkBuilder* builder;$/;"	v	typeref:typename:GtkBuilder *	file:
capacity	vec_queue.h	/^    int capacity;$/;"	m	struct:__anonc7a432bd0108	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clients	server.c	/^my_vec_t clients;$/;"	v	typeref:typename:my_vec_t
clients_iterate	server.c	/^clients_iterate()$/;"	f	typeref:typename:void	file:
cmd_params	gui.h	/^struct cmd_params {$/;"	s
connect_communication_signals	server.c	/^connect_communication_signals()$/;"	f	typeref:typename:void
content_length	node_http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser	typeref:typename:uint64_t
create_listen_socket	socket.c	/^create_listen_socket(sockinfo_t *info)$/;"	f	typeref:typename:sockfd_t
cross_logging_buffer	server.c	/^gchar cross_logging_buffer[100];$/;"	v	typeref:typename:gchar[100]
data	node_http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser	typeref:typename:void *
description	node_http_parser.c	/^  const char *description;$/;"	m	struct:__anonf8ffc3070108	typeref:typename:const char *	file:
destroy_main_window	gui.c	/^destroy_main_window(GtkWidget* widget, gpointer* data)$/;"	f	typeref:typename:void
error	server.c	/^error(char* err)$/;"	f	typeref:typename:void
error_check	socket.c	/^error_check(int statement, int expected_error, char* msg)$/;"	f	typeref:typename:void
extra_flags	node_http_parser.h	/^  unsigned int extra_flags : 2;$/;"	m	struct:http_parser	typeref:typename:unsigned int:2
family	socket.h	/^	int family;$/;"	m	struct:__anonec7e8d040108	typeref:typename:int
field_data	node_http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anonf8ffc30c0108[]
field_set	node_http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url	typeref:typename:uint16_t
flags	node_http_parser.h	/^  unsigned int flags : 8;       \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:8
flags	node_http_parser.h	/^enum flags$/;"	g
from	http_parser_utils.h	/^	gchar* from;$/;"	m	struct:_request	typeref:typename:gchar *
global_app_communcation	gui.c	/^gpointer global_app_communcation;$/;"	v	typeref:typename:gpointer
global_app_communcation	server.c	/^gpointer global_app_communcation;$/;"	v	typeref:typename:gpointer
gui_log	gui.c	/^gui_log(request_t *req, gchar *message)$/;"	f	typeref:typename:void
gui_thread	server.c	/^pthread_t gui_thread;$/;"	v	typeref:typename:pthread_t
gui_thread_routine	gui.c	/^gui_thread_routine(void* data)$/;"	f	typeref:typename:void *
h_C	node_http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	node_http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	node_http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	node_http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	node_http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	node_http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_connection_upgrade	node_http_parser.c	/^  , h_connection_upgrade$/;"	e	enum:header_states	file:
h_content_length	node_http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_content_length_num	node_http_parser.c	/^  , h_content_length_num$/;"	e	enum:header_states	file:
h_content_length_ws	node_http_parser.c	/^  , h_content_length_ws$/;"	e	enum:header_states	file:
h_general	node_http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	node_http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	node_http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	node_http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_connection_token	node_http_parser.c	/^  , h_matching_connection_token$/;"	e	enum:header_states	file:
h_matching_connection_token_start	node_http_parser.c	/^  , h_matching_connection_token_start$/;"	e	enum:header_states	file:
h_matching_connection_upgrade	node_http_parser.c	/^  , h_matching_connection_upgrade$/;"	e	enum:header_states	file:
h_matching_content_length	node_http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	node_http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	node_http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	node_http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_token	node_http_parser.c	/^  , h_matching_transfer_encoding_token$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_token_start	node_http_parser.c	/^  , h_matching_transfer_encoding_token_start$/;"	e	enum:header_states	file:
h_matching_upgrade	node_http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	node_http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	node_http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	node_http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
handle_connections	server.c	/^handle_connections(int client_socket)$/;"	f	typeref:typename:void *	file:
header_bar	server.glade	/^      <object class="GtkHeaderBar" id="header_bar">$/;"	i
header_field_cb	http_parser_utils.c	/^header_field_cb (http_parser *parser, const char *p, size_t len)$/;"	f	typeref:typename:int
header_state	node_http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:7
header_states	node_http_parser.c	/^enum header_states$/;"	g	file:
header_t	http_parser_utils.h	/^} header_t; $/;"	t	typeref:struct:__anon84915bf70108
header_value_cb	http_parser_utils.c	/^header_value_cb (http_parser *parser, const char *p, size_t len)$/;"	f	typeref:typename:int
headers	http_parser_utils.h	/^	header_t headers[MAX_HEADER_NUM];$/;"	m	struct:_request	typeref:typename:header_t[]
headers_complete_cb	http_parser_utils.c	/^headers_complete_cb (http_parser *parser)$/;"	f	typeref:typename:int
http_body_is_final	node_http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f	typeref:typename:int
http_cb	node_http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t	typeref:typename:int (*)(http_parser *)
http_data_cb	node_http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t	typeref:typename:int (*)(http_parser *,const char * at,size_t length)
http_do	http_parser_utils.c	/^http_do(sockfd_t sock, http_parser_settings *settings) {$/;"	f	typeref:typename:void
http_errno	node_http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	struct:http_parser	typeref:typename:unsigned int:7
http_errno	node_http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	node_http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f	typeref:typename:const char *
http_errno_name	node_http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f	typeref:typename:const char *
http_host_state	node_http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	node_http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser	typeref:typename:unsigned short
http_message_needs_eof	node_http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f	typeref:typename:int
http_method	node_http_parser.h	/^enum http_method$/;"	g
http_method_str	node_http_parser.c	/^http_method_str (enum http_method m)$/;"	f	typeref:typename:const char *
http_minor	node_http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser	typeref:typename:unsigned short
http_parse_host	node_http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	typeref:typename:int	file:
http_parse_host_char	node_http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	typeref:enum:http_host_state	file:
http_parser	node_http_parser.h	/^struct http_parser {$/;"	s
http_parser	node_http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	node_http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f	typeref:typename:size_t
http_parser_init	node_http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f	typeref:typename:void
http_parser_parse_url	node_http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f	typeref:typename:int
http_parser_pause	node_http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f	typeref:typename:void
http_parser_set_max_header_size	node_http_parser.c	/^http_parser_set_max_header_size(uint32_t size) {$/;"	f	typeref:typename:void
http_parser_settings	node_http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	node_http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_settings_init	node_http_parser.c	/^http_parser_settings_init(http_parser_settings *settings)$/;"	f	typeref:typename:void
http_parser_type	node_http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	node_http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	node_http_parser.h	/^enum http_parser_url_fields$/;"	g
http_parser_url_init	node_http_parser.c	/^http_parser_url_init(struct http_parser_url *u) {$/;"	f	typeref:typename:void
http_parser_version	node_http_parser.c	/^http_parser_version(void) {$/;"	f	typeref:typename:unsigned long
http_should_keep_alive	node_http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f	typeref:typename:int
http_status	node_http_parser.h	/^enum http_status$/;"	g
http_status_str	node_http_parser.c	/^http_status_str (enum http_status s)$/;"	f	typeref:typename:const char *
http_strerror_tab	node_http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anonf8ffc3070108[]
index	node_http_parser.h	/^  unsigned int index : 5;        \/* index into current matcher *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:5
init_client_vec	server.c	/^init_client_vec()$/;"	f	typeref:typename:void
init_gui	gui.c	/^init_gui(int argc, char** argv, pthread_t* gui_thread)$/;"	f	typeref:typename:void
int16_t	node_http_parser.h	/^typedef __int16 int16_t;$/;"	t	typeref:typename:__int16
int32_t	node_http_parser.h	/^typedef __int32 int32_t;$/;"	t	typeref:typename:__int32
int64_t	node_http_parser.h	/^typedef __int64 int64_t;$/;"	t	typeref:typename:__int64
int8_t	node_http_parser.h	/^typedef __int8 int8_t;$/;"	t	typeref:typename:__int8
items	vec_queue.h	/^    void **items;$/;"	m	struct:__anonc7a432bd0108	typeref:typename:void **
itoa	utils.h	/^char* itoa(int val, int base){$/;"	f	typeref:typename:char *
last_was_value	http_parser_utils.c	/^static int last_was_value= 0;$/;"	v	typeref:typename:int	file:
len	node_http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anonf8ffc30c0108	typeref:typename:uint16_t
lenient_http_headers	node_http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	struct:http_parser	typeref:typename:unsigned int:1
listen_sock	gui.c	/^int listen_sock;$/;"	v	typeref:typename:int
listen_sock	server.c	/^sockfd_t listen_sock;$/;"	v	typeref:typename:sockfd_t
log_main	server.glade	/^                  <object class="GtkTextView" id="log_main">$/;"	i
log_main_buffer	server.glade	/^  <object class="GtkTextBuffer" id="log_main_buffer"\/>$/;"	i
main	Makefile	/^main: $(OBJ)$/;"	t
main	server.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
main_switch_state_changed	gui.c	/^main_switch_state_changed(GtkSwitch* widget, gboolean state,  gpointer* data)$/;"	f	typeref:typename:gboolean
max_header_size	node_http_parser.c	/^static uint32_t max_header_size = HTTP_MAX_HEADER_SIZE;$/;"	v	typeref:typename:uint32_t	file:
message_begin_cb	http_parser_utils.c	/^message_begin_cb (http_parser *parser)$/;"	f	typeref:typename:int
message_complete_cb	http_parser_utils.c	/^message_complete_cb (http_parser *parser)$/;"	f	typeref:typename:int
method	http_parser_utils.h	/^	const char* method;$/;"	m	struct:_request	typeref:typename:const char *
method	node_http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:8
method_strings	node_http_parser.c	/^static const char *method_strings[] =$/;"	v	typeref:typename:const char * []	file:
my_url_cb	http_parser_utils.c	/^my_url_cb (http_parser *parser, const char* p, size_t len)$/;"	f	typeref:typename:int
my_vec_add	vec_queue.h	/^my_vec_add(my_vec_t *v, void *item)$/;"	f	typeref:typename:void
my_vec_delete	vec_queue.h	/^my_vec_delete(my_vec_t *v, int index)$/;"	f	typeref:typename:int
my_vec_free	vec_queue.h	/^my_vec_free(my_vec_t *v)$/;"	f	typeref:typename:void
my_vec_get	vec_queue.h	/^my_vec_get(my_vec_t *v, int index)$/;"	f	typeref:typename:void *
my_vec_get_tail	vec_queue.h	/^my_vec_get_tail(my_vec_t *v)$/;"	f	typeref:typename:void *
my_vec_init	vec_queue.h	/^void my_vec_init(my_vec_t *v)$/;"	f	typeref:typename:void
my_vec_pop	vec_queue.h	/^my_vec_pop(my_vec_t *v)$/;"	f	typeref:typename:void *
my_vec_push	vec_queue.h	/^my_vec_push(my_vec_t *v, void *item)$/;"	f	typeref:typename:void *
my_vec_realocate	vec_queue.h	/^static void my_vec_realocate(my_vec_t *v, int capacity)$/;"	f	typeref:typename:void
my_vec_set	vec_queue.h	/^my_vec_set(my_vec_t *v, int index, void *item)$/;"	f	typeref:typename:void
my_vec_t	vec_queue.h	/^} my_vec_t;$/;"	t	typeref:struct:__anonc7a432bd0108
name	http_parser_utils.h	/^	char* name;$/;"	m	struct:__anon84915bf70108	typeref:typename:char *
name	node_http_parser.c	/^  const char *name;$/;"	m	struct:__anonf8ffc3070108	typeref:typename:const char *	file:
name_len	http_parser_utils.h	/^	size_t name_len;$/;"	m	struct:__anon84915bf70108	typeref:typename:size_t
normal_url_char	node_http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	typeref:typename:const uint8_t[32]	file:
nread	node_http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser	typeref:typename:uint32_t
num_of_headers	http_parser_utils.c	/^static int num_of_headers = 0;$/;"	v	typeref:typename:int	file:
off	node_http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anonf8ffc30c0108	typeref:typename:uint16_t
on_body	node_http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_chunk_complete	node_http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_chunk_header	node_http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_header_field	node_http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_header_value	node_http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_headers_complete	node_http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_message_begin	node_http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_message_complete	node_http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings	typeref:typename:http_cb
on_status	node_http_parser.h	/^  http_data_cb on_status;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
on_url	node_http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings	typeref:typename:http_data_cb
parent	com_obj.h	/^	GObject parent;$/;"	m	struct:_AppCommunication	typeref:typename:GObject
parse_url_char	node_http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	typeref:enum:state	file:
port	node_http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url	typeref:typename:uint16_t
port	server.c	/^int port= 5000;$/;"	v	typeref:typename:int
port	socket.h	/^	int port;$/;"	m	struct:__anonec7e8d040108	typeref:typename:int
request	http_parser_utils.c	/^request_t request;$/;"	v	typeref:typename:request_t
request_t	http_parser_utils.h	/^typedef struct _request request_t;$/;"	t	typeref:struct:_request
s_body_identity	node_http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	node_http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	node_http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	node_http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	node_http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	node_http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	node_http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	node_http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	node_http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	node_http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_header_almost_done	node_http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	node_http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	node_http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	node_http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_discard_lws	node_http_parser.c	/^  , s_header_value_discard_lws$/;"	e	enum:state	file:
s_header_value_discard_ws	node_http_parser.c	/^  , s_header_value_discard_ws$/;"	e	enum:state	file:
s_header_value_discard_ws_almost_done	node_http_parser.c	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state	file:
s_header_value_lws	node_http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	node_http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	node_http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	node_http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	node_http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	node_http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	node_http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	node_http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	node_http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	node_http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	node_http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	node_http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone	node_http_parser.c	/^  , s_http_host_v6_zone$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone_start	node_http_parser.c	/^  , s_http_host_v6_zone_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	node_http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	node_http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_message_done	node_http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_fragment	node_http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	node_http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	node_http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	node_http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	node_http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	node_http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_I	node_http_parser.c	/^  , s_req_http_I$/;"	e	enum:state	file:
s_req_http_IC	node_http_parser.c	/^  , s_req_http_IC$/;"	e	enum:state	file:
s_req_http_dot	node_http_parser.c	/^  , s_req_http_dot$/;"	e	enum:state	file:
s_req_http_end	node_http_parser.c	/^  , s_req_http_end$/;"	e	enum:state	file:
s_req_http_major	node_http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	node_http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	node_http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	node_http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	node_http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	node_http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	node_http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	node_http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	node_http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	node_http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	node_http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	node_http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	node_http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	node_http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	node_http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	node_http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	node_http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	node_http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	node_http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_status_code	node_http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_dot	node_http_parser.c	/^  , s_res_http_dot$/;"	e	enum:state	file:
s_res_http_end	node_http_parser.c	/^  , s_res_http_end$/;"	e	enum:state	file:
s_res_http_major	node_http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	node_http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	node_http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	node_http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	node_http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	node_http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_res_status_start	node_http_parser.c	/^  , s_res_status_start$/;"	e	enum:state	file:
s_start_req	node_http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	node_http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	node_http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
server_running	gui.c	/^int server_running;$/;"	v	typeref:typename:int
server_running	server.c	/^int server_running = 0;$/;"	v	typeref:typename:int
server_thread	server.c	/^pthread_t server_thread;$/;"	v	typeref:typename:pthread_t
sockfd_t	socket.h	/^typedef int32_t sockfd_t;$/;"	t	typeref:typename:int32_t
sockinfo_t	socket.h	/^} sockinfo_t;$/;"	t	typeref:struct:__anonec7e8d040108
stack_main	server.glade	/^          <object class="GtkStack" id="stack_main">$/;"	i
stack_switcher_main	server.glade	/^          <object class="GtkStackSwitcher" id="stack_switcher_main">$/;"	i
start_state	node_http_parser.c	/^#define start_state /;"	d	file:
state	com_obj.h	/^	int state;$/;"	m	struct:_AppCommunication	typeref:typename:int
state	node_http_parser.c	/^enum state$/;"	g	file:
state	node_http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:7
status_code	node_http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:16
stop_server	server.c	/^stop_server()$/;"	f	typeref:typename:void	file:
switch_main	server.glade	/^          <object class="GtkSwitch" id="switch_main">$/;"	i
tags	Makefile	/^tags:$/;"	t
tokens	node_http_parser.c	/^static const char tokens[256] = {$/;"	v	typeref:typename:const char[256]	file:
total	vec_queue.h	/^    int total;$/;"	m	struct:__anonc7a432bd0108	typeref:typename:int
type	node_http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	struct:http_parser	typeref:typename:unsigned int:2
uint16_t	node_http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t	typeref:typename:unsigned __int16
uint32_t	node_http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t	typeref:typename:unsigned __int32
uint64_t	node_http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint8_t	node_http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t	typeref:typename:unsigned __int8
unhex	node_http_parser.c	/^static const int8_t unhex[256] =$/;"	v	typeref:typename:const int8_t[256]	file:
upgrade	node_http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	struct:http_parser	typeref:typename:unsigned int:1
url	http_parser_utils.h	/^	gchar* url;$/;"	m	struct:_request	typeref:typename:gchar *
value	http_parser_utils.h	/^	char *value;$/;"	m	struct:__anon84915bf70108	typeref:typename:char *
value_len	http_parser_utils.h	/^	size_t value_len;$/;"	m	struct:__anon84915bf70108	typeref:typename:size_t
walid_create_socket	server.c	/^walid_create_socket()$/;"	f	typeref:typename:void *	file:
window_main	server.glade	/^  <object class="GtkWindow" id="window_main">$/;"	i
